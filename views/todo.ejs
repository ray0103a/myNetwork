<!DOCTYPE html>
<html>
  <head>
    <!-- レスポンシブ user-scalable(拡大の許可)-->
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, user-scalable=yes">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    
    <style>
        h1{
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>共有メモ</h1>
    <h1><%= title %></h1>




    <div id="app">
        <div class="input-group mb-3">
            <input type="text" v-model="newItem" class="form-control" placeholder="追加したい物を入力してください" aria-label="追加したい物を入力してください" aria-describedby="button-addon2">
            <button class="btn btn-outline-secondary" v-on:click="addItem" type="button" id="button-addon2">追加</button>
        </div>
          
        <ul class="list-group">
            <li v-for="(todo,index) in todos" class="list-group-item">
                <!--<input type="checkbox" v-model="todo.isDone">--><!--チェックボックス同期-->
                <div class="row">
                    <div class="col-8" style="font-size: 26px;">
                        {{todo.name}}
                    </div><!--classの追加-->
                    <div class="col-4">
                        <button class="btn btn-danger" v-on:click="deleteItem(index)">削除</button>　<!--indexを引数に指定-->
                    </div>
                </div>
            </li>
        </ul>
        <button class="btn btn-danger" v-on:click="getItem">データ取得</button>
        <button class="btn btn-danger" v-on:click="updateItem">登録</button>
        <!--<pre>{{ $data }}</pre>-->
    </div>
    
    <script src="https://unpkg.com/vue@3"></script>
    <script src="/javascripts/myCommon.js"></script>

    <script>
        Vue.createApp({
            el:'#app',
                data() {
                    return {
                        newItem:"",
                        todos:[]
                    }
                },
                mounted() {
                    window.onload = ()=>{
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/getItem';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/getItem'
                        let url = getServerURL() + '/todo/getItem';

                        var data = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   
                                //デバッグ用 JSONからオブジェクトへ変換
                                //var p = JSON.parse(json);

                                this.todos = json;
                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    }
                },
                methods:{
                    addItem:function(event){
                        //タスク未入力の場合は追加しない
                        if(this.newItem == '')return; 
                        var todo = {
                            name: this.newItem,
                            isDone:false
                        };
                        this.todos.push(todo);
                        this.newItem = '' //タスク追加後に入力欄を空にする
                    },
                    deleteItem:function(index){ //indexを引数に指定
                        this.todos.splice(index,1) //indexで指定された要素を1つ削除
                    },
                    getItem:function(){
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/getItem';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/getItem'
                        let url = getServerURL() + '/todo/getItem';

                        var data = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   
                                //デバッグ用 JSONからオブジェクトへ変換
                                var p = JSON.parse(json);

                                this.todos = p;
                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    },
                    updateItem:function(){
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/update';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/update'
                        let url = getServerURL() + '/todo/update';;

                        //取得するファイル名を指定
                        var json = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(json)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    alert('登録完了です。')
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   

                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    }
                }
        }).mount('#app');

    </script>
    
</body>
</html>
