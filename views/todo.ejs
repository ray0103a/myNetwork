<!DOCTYPE html>
<html>
  <head>
    <!-- レスポンシブ user-scalable(拡大の許可)-->
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, user-scalable=yes">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
    
    <style>
        @font-face {
            font-family: 'MyFont';
            src: url(stylesheets/x12y16pxMaruMonica.ttf);
        }    
        body {
            font-family: MyFont;
        }

        h1{
            text-align: center;
            font-size: 48px;
        }

        #main {
            width: 200px;
            border: 1px dotted black;
        }
        h1 {
            margin: 0;
            display: inline-block;
        }
        button {
            float: right;
            
        }

        .mini-text{font-size:10px;}/*文字大きさ*/

        ul.bottom-menu {
            position: fixed;
            left:0;
            bottom: 1px;
            width: 100%;
            height:60px;/*高さ*/
            margin:0;
            padding:0;
            background-color:#f5f5f5;/*背景色*/
            border-top:2px solid #808080;/*バーの上の線*/
            border-bottom:2px solid #808080;/*バーの下の線*/
            z-index:30;}

        ul.bottom-menu li {
            float:left;
            width:25%;
            background-color:#f5f5f5;/*背景色*/
            list-style-type:none;
            text-align:center;
            font-size:25px;/*アイコンのサイズ*/}

        .bottom-menu li a {
            display: block;
            color:#808080;/*アイコン＆文字の色*/
            padding-top:10px;
            padding-bottom:5px;
            line-height:10px;
            text-decoration:none;}

        .bottom-menu li a:hover {
            color:#a9a9a9;/*マウスオーバー時の色*/}

        /* === 展開メニュー === */

        ul.menu-second-level {
            visibility: hidden;
            opacity: 0;
            z-index:1;}

        ul.menu-second-level li a{
            border-top:1px dashed #a9a9a9;/*展開の枠点線*/
                font-size:15px;/*展開メニューの文字サイズ*/
                line-height:30px;/*文字の縦幅*/}

        .menu-second-level li a:hover {
            height:100%;
            background: lightgrey;/*マウスオーバーの色*/}

        li.menu-width-max ul.menu-second-level {
            position: absolute;
            bottom: 47px;/*高さ*/
            left: 0;
            box-sizing: border-box;
            width: 100%;
            padding:0;}

        li.menu-width-max:hover ul.menu-second-level {
            bottom: 47px;/*高さ*/
            visibility: visible;
            opacity: 1;}

        li.menu-width-max ul.menu-second-level li {
            float: left;
            width: 100%;
            border: none;}
    </style>
</head>
<body>
    <div id="app">
        <div style="text-align: center;">
            <div style="display: inline-block;">
                <h1>メモ</h1> 
            </div>
            <div style="display: inline-block;">
                <button type="button" v-on:click="getItem" class="btn btn-primary rounded-circle p-0 material-icons" style="width:2rem; height:2rem;">autorenew</button>
            </div>
        </div>

        <div class="input-group mb-3" style="position: relative;">
            <input type="text" v-model="newItem" class="form-control" placeholder="追加したい物を入力してください" aria-label="追加したい物を入力してください" aria-describedby="button-addon2">
            <button class="btn btn-outline-secondary" v-on:click="addItem" type="button" id="button-addon2">追加</button>
        </div>
          
        <ul class="list-group">
            <li v-for="(todo,index) in todos" class="list-group-item">
                <!--<input type="checkbox" v-model="todo.isDone">--><!--チェックボックス同期-->
                <div class="row">
                    <div class="col-8" style="font-size: 20px;">
                        {{todo.name}}
                    </div><!--classの追加-->
                    <div class="col-4 float-end" style="display: flex; align-items: center;">
                        <button class="btn btn-danger" v-on:click="deleteItem(index)" style="position: absolute; right: 0; vertical-align: middle;">削除</button>　<!--indexを引数に指定-->
                    </div>
                </div>
            </li>
        </ul>
        
        <!--
        <div class="d-flex flex-column align-items-center justify-content-center">
            <button class="btn btn-danger" v-on:click="updateItem">登録</button>
        </div>
        -->

        <!--<pre>{{ $data }}</pre>-->

        <ul class="bottom-menu">
            <li>
                <!--　↓↓項目1. ホーム 　＃の部分にホームのURLを入れる -->
                <a href="#">
                <i class="material-icons">create</i><br><span class="mini-text">Memo</span></a>
            </li>
        
            <li class="menu-width-max">
            <!-- ↓↓項目2. おすすめ　すぐ下の"＃"はそのまま -->
                <a href="#"><i class="blogicon-list"></i><br><span class="mini-text">おすすめ</span></a>
        
                <ul class="menu-second-level">
        
                <!-- 下の"#"の部分におすすめ"記事URL"とタイトル等を入れる -->
                        <li><a href="#">タイトル１</a></li>
                        <li><a href="#">タイトル２</a></li>
                        <li><a href="#">タイトル３</a></li>
                        <li><a href="#">タイトル４</a></li>
                        <li><a href="#">タイトル５</a></li>
                    </ul>
            </li>
            <li>
                <!-- ↓↓項目3.　読者登録 ↓↓の部分の書き換えが必要です -->
                <!--  ~hatena.ne.jp/自分のはてなID/URL(http://の部分は無し)/subscribe　-->
                <a href="./eatMenu">　<!--  target="_blank"  -->
                <i class="blogicon-hatenablog"></i><br><span class="mini-text">献立</span></a>
            </li>
            <li>
                <!-- ↓↓項目4.　ツイッター ↓↓の部分の書き換えが必要です-->
                <!-- screen_name=自分のツイッターID" ←＠マーク以降のIDを入れる -->
                <a href="#">
                <i class="blogicon-twitter"></i><br><span class="mini-text">作成中</span></a>
            </li>
            
        </ul>
    </div>

    <div style="height: 20px;"></div>
    
    <script src="https://unpkg.com/vue@3"></script>
    <script src="/javascripts/myCommon.js"></script>

    <script>
        Vue.createApp({
            el:'#app',
                data() {
                    return {
                        newItem:"",
                        todos:[]
                    }
                },
                mounted() {
                    window.onload = ()=>{
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/getItem';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/getItem'
                        let url = getServerURL() + '/todo/getItem';

                        var data = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   
                                //デバッグ用 JSONからオブジェクトへ変換
                                //var p = JSON.parse(json);

                                this.todos = json;
                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    }
                },
                methods:{
                    addItem:function(event){
                        //タスク未入力の場合は追加しない
                        if(this.newItem == '')return; 

                        var todo = {
                            name: this.newItem,
                            isDone:false
                        };
                        
                        //URLを取得
                        let url = getServerURL() + '/todo/insData';;

                        //取得するファイル名を指定
                        var json = todo;

                        //サーバーにデータを追加する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(json)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    //this.todos.push(todo);
                                    //サーバーの最新情報を取得する
                                    this.getItem();
                                    this.newItem = '' //タスク追加後に入力欄を空にする
                                } else {
                                    alert('エラーが発生しました。管理者へ連絡してください。')
                                    throw new Error();
                                }
                            })
                            .then(json => {   

                            }) 
                            .catch(function (error) {
                                //alert(error);
                            });    
                    },
                    deleteItem:function(index){ //indexを引数に指定
                        var delTodo = this.todos[index];
                        
                        //URLを取得
                        let url = getServerURL() + '/todo/delData';;

                        //取得するファイル名を指定
                        var json = delTodo;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(json)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    //サーバーの最新情報を取得する
                                    this.getItem();
                                } else {
                                    alert('エラーが発生しました。管理者へ連絡してください。')
                                    throw new Error();
                                }
                            })
                            .then(json => {   

                            }) 
                            .catch(function (error) {
                                //alert(error);
                            });    
                    },
                    getItem:function(){
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/getItem';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/getItem'
                        let url = getServerURL() + '/todo/getItem';

                        var data = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(data)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    return response.json();
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   
                                //デバッグ用 JSONからオブジェクトへ変換
                                //var p = JSON.parse(json);

                                this.todos = json;
                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    },
                    updateItem:function(){
                        //URLを取得
                        //let url = 'http://localhost:3000/todo/update';
                        //let url = 'https://test-heroku-34819.herokuapp.com/todo/update'
                        let url = getServerURL() + '/todo/update';;

                        //取得するファイル名を指定
                        var json = this.todos;

                        //保存したデータを取得する
                        fetch(url,
                            {
                                method: 'POST',
                                headers: {
                                            'Content-Type': 'application/json'
                                            },
                                //★JSON形式で通信する指定があるので、JSONでなければ渡せない
                                body: JSON.stringify(json)
                            })
                            .then((response) => {
                                if(response.ok) {
                                    alert('登録完了です。')
                                } else {
                                    throw new Error();
                                }
                            })
                            .then(json => {   

                            }) 
                            .catch(function (error) {
                                alert(error);
                            });    
                    }
                }
        }).mount('#app');

    </script>
    
</body>
</html>
