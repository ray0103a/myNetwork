<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=0.1, maximum-scale=4,user-scalable=yes">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">
</head>
<body>
    <h1>経営状態算出</h1>

    <div class="mb-3">
        <label for="uriage" class="form-label">売上高</label>
        <input type="text" class="form-control" id="uriage" aria-describedby="emailHelp">
    </div>

    <div class="mb-3">
        <label for="rieki" class="form-label">当期純利益</label>
        <input type="text" class="form-control" id="rieki" aria-describedby="emailHelp">
    </div>

    <div class="mb-3">
        <label for="sisan" class="form-label">資産</label>
        <input type="text" class="form-control" id="sisan" aria-describedby="emailHelp">
    </div>

    <div class="mb-3">
        <label for="husai" class="form-label">負債</label>
        <input type="text" class="form-control" id="husai" aria-describedby="emailHelp">
    </div>

    <div class="mb-3">
        <label for="junsisan" class="form-label">純資産</label>
        <input type="text" class="form-control" id="junsisan" aria-describedby="emailHelp">
    </div>



    <button type="button" class="btn btn-primary" onclick="buttonClick()">計算</button>

    <canvas id="mychart-bar-stack" width="400" height="400"></canvas>

    <div class="container" style="background-color: rgb(134, 248, 248);">
        <div class="mb-3">
            <label for="roe" class="form-label">売上高純利益率</label>
            <input type="text" id="uri" class="form-control">
        </div>
        <div class="mb-3">
            <label for="roe" class="form-label">総資産回転率</label>
            <input type="text" id="soukai" class="form-control">
        </div>
        <div class="mb-3">
            <label for="roa" class="form-label">ROA(総資産利益率)</label>
            <input type="text" id="roa" class="form-control" placeholder="">
        </div>
        <br>
    </div>

    <div class="container" style="background-color: rgb(250, 178, 150);">
        <div class="mb-3">
            <label for="roe" class="form-label">財務レバレッジ</label>
            <input type="text" id="zaimu" class="form-control">
        </div>

        <div class="mb-3">
            <label for="roe" class="form-label">ROE(自己資本利益率)</label>
            <input type="text" id="roe" class="form-control" placeholder="">
        </div>
        <br>
    </div>

    <!--<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.6.0/chart.min.js"></script>-->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.0/Chart.min.js"></script>
    <!--<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>-->
    <!--<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>-->

    <script>
        var dataAsset = [];
        var dataHusai = [];
        var dataCapital = [];

        window.onload = function() {
            drawChart();
        };

        var myChart2;
        
        function buttonClick(){
            if (myChart2) {
                myChart2.destroy();
            }

            var sisan = document.getElementById('sisan');
            var husai = document.getElementById('husai');
            var junsisan = document.getElementById('junsisan');
            var uriage = document.getElementById('uriage');
            var rieki = document.getElementById('rieki');
            var uri = document.getElementById('uri');
            var soukai = document.getElementById('soukai');
            var zaimu = document.getElementById('zaimu');
            var roe = document.getElementById('roe');
            var roa = document.getElementById('roa');

            var sisanVal = sisan.value;
            var husaiVal = husai.value;
            var junsisanVal = junsisan.value;
            var uriageVal = uriage.value;
            var riekiVal = rieki.value;

            dataAsset = [];
            dataAsset.push(sisanVal);
            dataAsset.push(0);

            dataHusai = [];
            dataHusai.push(0);
            dataHusai.push(husaiVal);

            dataCapital = [];
            dataCapital.push(0);
            dataCapital.push(junsisanVal);

            uri.value = (((Math.round(riekiVal / uriageVal * 100)) / 100) * 100).toFixed() + '%';
            soukai.value = (Math.round(uriageVal / sisanVal * 100)) / 100;
            zaimu.value = sisanVal / junsisanVal;
            roe.value = (Math.round(riekiVal / junsisanVal * 100)) / 100 * 100 + '%';
            roa.value = (Math.round(riekiVal / sisanVal * 100)) / 100 * 100 + '%';
            drawChart();
        }

        function drawChart() {
            var ctx2 = document.getElementById('mychart-bar-stack');
            myChart2 = new Chart(ctx2, {
                type: 'bar',
                data: {
                    labels: ['資産', '負債/純資産'],
                    datasets: [
                        {
                            label: '資産',
                            data: dataAsset,
                            backgroundColor: 'rgba(0, 255, 64, 0.6)',
                            stack: 'stack-1',
                        }, 
                        {
                            label: '純資産',
                            data: dataCapital,
                            backgroundColor: 'rgba(255, 159, 64, 0.6)',
                            stack: 'stack-1',
                        }, 
                        {
                            label: '負債',
                            data: dataHusai,
                            backgroundColor: 'rgba(255,99,132,0.6)',
                            stack: 'stack-1',
                        }],
                },
                options: {
                    scales: {   
                        xAxes: [{                         //x軸設定
                            display: true,                //表示設定
                            barPercentage: 1.0,           //棒グラフ幅
                            categoryPercentage: 1.0,      //棒グラフ幅
                            scaleLabel: {                 //軸ラベル設定
                            display: true,             //表示設定
                            labelString: '',  //ラベル
                            fontSize: 18               //フォントサイズ
                            },
                            ticks: {
                                fontSize: 18             //フォントサイズ
                            },
                        }],
                    },
                },
                plugins: [dataLabelPlugin]
            });
        };

        var dataLabelPlugin = {
            afterDatasetsDraw: function(chart) {
                var ctx = chart.ctx;
                var loopCount = 0;
                chart.data.datasets.forEach(function(dataset, 系列) {
                    var meta = chart.getDatasetMeta(系列);
                    if (!meta.hidden) {
                        meta.data.forEach(function(element, 要素) {
                            if (loopCount == 0 || loopCount == 3 || loopCount == 5 || loopCount == 7 || loopCount == 9) {
                                // ステップ１　数値を文字列に変換
                                var dataString = dataset.data[要素].toString();

                                var dataLabel = dataset.label;

                                var setLabel = dataLabel + '\n' + dataString;

                                // ステップ２　文字列の書体
                                ctx.fillStyle = "black";            // 色　'rgb(0, 0, 0)', 'rgba(192, 80, 77, 0.7)'
                                var fontSize = 14;                  // サイズ
                                var fontStyle = "normal";           // 書体 "bold", "italic"
                                var fontFamily = "serif";           // フォントの種類 "sans-serif", "ＭＳ 明朝"
                                ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);
                                                            // ステップ３　文字列の位置の基準点
                                ctx.textAlign = 'center';           // 文字列　start, end, left, right, center
                                ctx.textBaseline = 'middle';        // 文字高　middle, top, bottom
                                                            // ステップ４　文字列のグラフでの位置
                                var padding = 5;                   // 点と文字列の距離
                                var position = element.tooltipPosition();
                                                                //文字列の表示　 fillText(文字列, Ｘ位置, Ｙ位置)
                                ctx.fillText(setLabel, position.x, position.y + fontSize/2);
                            }
                            loopCount++;
                        });
                    }
                });
            }
        }
    </script>


    
    
    


    <script>
        //https://data.sec.gov/api/xbrl/companyconcept/CIK0000320193/us-gaap/AccountsPayableCurrent.json
        //https://data.sec.gov/api/xbrl/companyconcept/CIK0000320193/us-gaap/CashAndCashEquivalentsAtCarryingValue.json
        //https://data.sec.gov/api/xbrl/companyfacts/CIK0000320193.json
        //https://data.sec.gov/submissions/CIK0000320193.json
        //var url = 'https://data.sec.gov/api/xbrl/companyconcept/CIK0000320193/us-gaap/AccountsPayableCurrent.json';

        /*
        $(function() {      
            dataAsset.push(35);
            dataAsset.push(0);
          
            
            jQuery.getJSON(url, function (data) {
                var a = data;
                alert('取得！');
            });
            
        });
        */
    </script>
  </body>
</html>
